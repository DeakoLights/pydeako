stages:
  - container
  - test
  - push
  - cut
  - distribute

variables:
  DOCKER_TLS_CERTDIR: "/certs/${CI_JOB_ID}" # Create a cert dir per job
  DOCKER_DRIVER: overlay2
  IMAGE: "macaroni"
  TAG: "latest"

  # Runner tags
  RUNNER_AWS_SMALL: "cloud_aws_t3.small"

.container_build: &container_build
  stage: container
  image: docker:23.0.4-dind-alpine3.17
  services:
    - docker:dind
  tags:
    - $RUNNER_AWS_SMALL
  script:
    - docker login -u $DOCKER_DEPLOY_USERNAME -p $DOCKER_DEPLOY_PASSWORD $DOCKER_REGISTRY_URL
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:latest || true
    - > 
      docker build 
      --build-arg BUILDKIT_INLINE_CACHE=1
      --cache-from $CI_REGISTRY_IMAGE/$IMAGE:latest
      --tag build-env
      .
    - docker tag build-env $CI_REGISTRY_IMAGE/$IMAGE:$TAG
    - docker push $CI_REGISTRY_IMAGE/$IMAGE:$TAG
  cache: {}
  interruptible: true

push_latest_container:
  <<: *container_build
  only:
    refs:
      - main
  variables:
    TAG: "latest"

push_branch_container:
  <<: *container_build
  only:
    - branches
  except:
    refs:
      - main
  variables:
    TAG: "${CI_COMMIT_REF_SLUG}"

.test_base: &test_base
  stage: test
  tags:
    - $RUNNER_AWS_SMALL
  only:
    - branches
  except:
    refs:
      - main
  image: $CI_REGISTRY_IMAGE/$IMAGE:${CI_COMMIT_REF_SLUG}

lint:
  <<: *test_base
  script:
    - pylint pydeako
    - pycodestyle pydeako

test:
  <<: *test_base
  script:
    - pytest pydeako

.cut-base: &cut-base
  stage: cut
  image: $CI_REGISTRY_IMAGE/$IMAGE:latest
  tags:
    - $RUNNER_AWS_SMALL
  only:
    refs:
      - main
  when: manual
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts # https://docs.gitlab.com/ee/ci/ssh_keys/#verifying-the-ssh-host-keys
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "software@deako.com"
    - git config --global user.name "Macroni"
  script:
    - old_version_number=$(grep 'version =' pyproject.toml | sed -n 's/.*version = "\(.*\)"/\1/p')
    - bump2version $BUMP_TYPE
    - new_version_number=$(grep 'version =' pyproject.toml | sed -n 's/.*version = "\(.*\)"/\1/p')
    - git checkout -b release/$new_version_number
    - git add .
    - git commit -m "Bumping version $old_version_number to $new_version_number"
    - git push origin release/$new_version_number

cut-patch:
  <<: *cut-base
  variables:
    BUMP_TYPE: patch

cut-minor:
  <<: *cut-base
  variables:
    BUMP_TYPE: minor

cut-major:
  <<: *cut-base
  variables:
    BUMP_TYPE: major

distribute:
  stage: distribute
  image: $CI_REGISTRY_IMAGE/$IMAGE:latest
  tags:
    - $RUNNER_AWS_SMALL
  only:
    refs:
      - /^release\/.*/
  script:
    - python -m build
    - twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*